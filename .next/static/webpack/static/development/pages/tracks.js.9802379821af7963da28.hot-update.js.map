{"version":3,"file":"static/webpack/static/development/pages/tracks.js.9802379821af7963da28.hot-update.js","sources":["webpack:///./pages/tracks.js"],"sourcesContent":["import Layout from '../components/MyLayout.js'\nimport React from 'react'\nimport Link from 'next/link'\nimport Router, { withRouter } from 'next/router';\nimport Chart from 'chart.js';\n\nexport default class Tracks extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tracks: null,\n      access_token: null,\n    }\n  }\n\n  componentDidMount (props) {\n    const access_token = Router.router.query.access_token;\n    this.setState({access_token: access_token})\n    const playlist_id = Router.router.query.playlist_id;\n    let tracks = null;\n    if (access_token !== null) {\n      fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n          headers: {\n            'Authorization': 'Bearer ' + access_token\n          }\n      }).then(res => res.json())\n        .then(response => this.handleTrackListResponse(response.items)) \n        .catch(error => console.error('Error:', error));        \n    } else {\n      alert(\"you are not logged in\");\n    }\n  }\n\n  handleTrackListResponse = (tracklist) => {\n    this.setState({tracks: tracklist})\n    let idList = '';\n\n    for (let index = 0; index < tracklist.length; index++) {\n      idList += tracklist[index].track.id + ',';\n      \n    }\n    this.getTrackAudioFeatures(idList); \n}\n\n\n  getTrackAudioFeatures = (idBlob) => {\n      fetch(`https://api.spotify.com/v1/audio-features/?ids=${idBlob}`, {\n        headers: {\n          'Authorization': 'Bearer ' + this.state.access_token\n        }\n    }).then(res => res.json())\n      .then(response => this.createTrackInfoObject(response.audio_features)) \n      .catch(error => console.error('Error:', error));  \n  }\n\n  trackObjects = []\n\n  createTrackInfoObject = (audioFeatures) => {\n    const tracklist = this.state.tracks\n    console.log(tracklist);\n    \n    for (let i = 0; i < audioFeatures.length; i++) {\n      for (let j = 0; j < this.state.tracks.length; j++) {        \n        if(tracklist[j].track.id === audioFeatures[i].id) {\n            let obj = {}\n            obj = audioFeatures[i];\n            obj[\"name\"] = tracklist[i].track.name\n            obj[\"artist\"] = tracklist[i].track.artists[0].name\n            this.trackObjects.push(obj)\n            obj = {}\n        }\n      }      \n    }\n    console.log(this.trackObjects);\n    \n  }\n\n\n  render () {\n    var ctx = typeof window !== 'undefined' && document.getElementById('myChart').getContext(\"2d\");\n    var scatterChart = typeof window !== 'undefined' && new Chart(ctx, {\n        type: 'scatter',\n        data: {\n            // datasets: [{\n            //     label: 'Scatter Dataset',\n            //     data: [{\n            //         x: -10,\n            //         y: -10\n            //     }, {\n            //         x: 5,\n            //         y: 5\n            //     }, {\n            //         x: 10,\n            //         y: 10\n            //     }]\n            // }]\n\n            // 0:\n            // acousticness: 0.133\n            // analysis_url: \"https://api.spotify.com/v1/audio-analysis/5AMlVYdyGdCQxGrzSuQET5\"\n            // artist: \"TENDER\"\n            // danceability: 0.638\n            // duration_ms: 309640\n            // energy: 0.754\n            // id: \"5AMlVYdyGdCQxGrzSuQET5\"\n            // instrumentalness: 0.0517\n            // key: 7\n            // liveness: 0.48\n            // loudness: -5.174\n            // mode: 0\n            // name: \"Handmade Ego\"\n            // speechiness: 0.0345\n            // tempo: 120.021\n            // time_signature: 4\n            // track_href: \"https://api.spotify.com/v1/tracks/5AMlVYdyGdCQxGrzSuQET5\"\n            // type: \"audio_features\"\n            // uri: \"spotify:track:5AMlVYdyGdCQxGrzSuQET5\"\n            // valence: 0.688\n\n            datasets: this.trackObjects.map((track, index) => (\n              {\"label\": [track.name, track.artist],\n                \"data\": [{\n                  \"x\": track.valence,\n\n                }]\n              }\n            ))\n\n            // datasets: [\n            //   {\n            //     label: [\"China\"],\n            //     backgroundColor: \"rgba(255,221,50,0.2)\",\n            //     borderColor: \"rgba(255,221,50,1)\",\n            //     data: [{\n            //       x: -21269017,\n            //       y: 5.245,\n            //       r: 15\n            //     }]\n            //   }, {\n            //     label: [\"Denmark\"],\n            //     backgroundColor: \"rgba(60,186,159,0.2)\",\n            //     borderColor: \"rgba(60,186,159,1)\",\n            //     data: [{\n            //       x: 258702,\n            //       y: -7.526,\n            //       r: 10\n            //     }]\n            //   }, {\n            //     label: [\"Germany\"],\n            //     backgroundColor: \"rgba(0,0,0,0.2)\",\n            //     borderColor: \"#000\",\n            //     data: [{\n            //       x: 3979083,\n            //       y: 6.994,\n            //       r: 15\n            //     }]\n            //   }, {\n            //     label: [\"Japan\"],\n            //     backgroundColor: \"rgba(193,46,12,0.2)\",\n            //     borderColor: \"rgba(193,46,12,1)\",\n            //     data: [{\n            //       x: 4931877,\n            //       y: 5.921,\n            //       r: 15\n            //     }]\n            //   }\n            // ]\n        },\n        options: {\n            // scales: {\n            //     xAxes: [{\n            //         type: 'linear',\n            //         position: 'center'\n            //     }]\n            // }\n            title: {\n              display: true,\n              text: 'Songs By Happiness and Danceability'\n            }, scales: {\n              yAxes: [{ \n                scaleLabel: {\n                  display: true,\n                  labelString: \"Happiness\"\n                }\n              }],\n              xAxes: [{ \n                scaleLabel: {\n                  display: true,\n                  labelString: \"Danceability\"\n                }\n              }]\n            }\n        }\n    });\n\n\n    return  (\n          <Layout>\n             <p>Tracks</p>\n             <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n          </Layout>\n      )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2BA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AApCA;AAuCA;AACA;AACA;AADA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA/CA;AACA;AADA;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAnEA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AADA;AADA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAPA;AAVA;AAxFA;AAoHA;AAGA;AAAA;AAAA;AAAA;AAGA;;;;AApMA;AACA;;;;;A","sourceRoot":""}