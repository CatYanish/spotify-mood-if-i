{"version":3,"file":"static/webpack/static/development/pages/index.js.5f108d12d806b4f00003.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nimport Layout from '../components/MyLayout.js'\nimport Link from 'next/link'\nimport Router, { withRouter } from 'next/router';\nimport { CLIENT_ID, REDIRECT_URI } from '../keys'\n\n\nclass Blog extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      triedToLogIn: false,\n      accessToken: null,\n      error: null,\n    }\n  }\n\n\n\n handleLogin () {\n\n       let stateKey = 'spotify_auth_state';\n\n       function getHashParams() {\n         var hashParams = {};\n         if (typeof window !== \"undefined\") {\n           var e, r = /([^&;=]+)=?([^&;]*)/g,\n               q = window.location.hash.substring(1);\n           while ( e = r.exec(q)) {\n              hashParams[e[1]] = decodeURIComponent(e[2]);\n           }\n         }\n         return hashParams;\n       }\n\n       function generateRandomString(length) {\n         var text = '';\n         var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n         for (var i = 0; i < length; i++) {\n           text += possible.charAt(Math.floor(Math.random() * possible.length));\n         }\n         return text;\n       };\n\n\n       let params = getHashParams();\n\n       let access_token = params.access_token,\n           state = params.state,\n           storedState = localStorage.getItem(stateKey);\n\n       if (access_token && (state == null || state !== storedState)) {\n         alert('There was an error during the authentication');\n       } else {\n         localStorage.removeItem(stateKey);\n         if (access_token) {\n           fetch('https://api.spotify.com/v1/me', {\n               headers: {\n                 'Authorization': 'Bearer ' + access_token\n               }\n           }).then(res => res.json())\n             .then(response => console.log('Success:', JSON.stringify(response)))\n             .catch(error => console.error('Error:', error));;\n         }\n       }\n\n\n\n   const client_id = CLIENT_ID; // Your client id\n   const redirect_uri = REDIRECT_URI; // Your redirect uri\n\n   state = generateRandomString(16);\n\n   localStorage.setItem(stateKey, state);\n   const scope = 'user-read-private user-read-email';\n\n   let url = 'https://accounts.spotify.com/authorize';\n   url += '?response_type=token';\n   url += '&client_id=' + encodeURIComponent(client_id);\n   url += '&scope=' + encodeURIComponent(scope);\n   url += '&redirect_uri=' + encodeURIComponent(redirect_uri);\n   url += '&state=' + encodeURIComponent(state);\n\n   window.location = url;\n\n}\n\n\n  render() {\n\n      return (\n        <Layout>\n            <div id=\"login\">\n              <button onClick={this.handleLogin} className=\"btn btn-primary\">Log in with Spotify</button>\n            </div>\n            { this.state.error !== null && this.state.triedToLogIn === true &&\n              <div>\n                Login was not successful, please try again or come back later\n              </div>\n            }\n            <style jsx>{`\n              h1,\n              a {\n                font-family: 'Arial';\n              }\n\n              a {\n                text-decoration: none;\n                color: blue;\n              }\n\n              a:hover {\n                opacity: 0.6;\n              }\n            `}</style>\n\n        </Layout>\n      )\n    }\n}\n\n\nexport default withRouter(Blog);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AALA;AAAA;AA2BA;;;;AAhHA;AACA;AAmHA;;;;A","sourceRoot":""}